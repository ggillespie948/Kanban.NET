@model IssueTracker.Models.ProjectModels

@{
    ViewBag.Title = "Details";
}

<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>
<h2> @Html.DisplayFor(model => model.Title) </h2>
<h3> A project by @Html.DisplayFor(model => model.OwnerUser.Email) </h3>
<div>
    <br />
    <h3> Team Members <button type="button" class="btn btn-success">+</button> </h3>
    <h5>Gary Gillespie <span class="badge badge-secondary">GG</span> Adam Murray <span class="badge badge-secondary">AM</span></h5>
    <hr />
</div>

<!-- Kanban Board Section, this javascript object is an MVVM component which is linked to the datatables object below  -->
<div class="board">
    <div class="board-column todo">
        <div class="board-column-header">To Do</div>
        <div class="board-column-content">
            <!-- Column 1 Project Tasks -->


        </div>
        <button type="button" class="btn btn-primary">+</button>
    </div>
    <div class="board-column working">
        <div class="board-column-header">In-Progress</div>
        <div class="board-column-content">
            <!-- Column 2 Project Tasks -->
            <div class="board-item"><div class="board-item-content"> <a href="#"> Item # 1 </a>  <span class="badge bg-primary" style="float:right;">GG</span>    </div></div>


        </div>
        <button type="button" class="btn btn-warning">+</button>
    </div>
    <div class="board-column done">
        <div class="board-column-header">Completed</div>
        <div class="board-column-content">
            <!-- Colum 3 Project Tasks -->
            <div class="board-item"><div class="board-item-content"><span>Item #</span>11</div></div>
            <div class="board-item"><div class="board-item-content"><span>Item #</span>13</div></div>
            <div class="board-item"><div class="board-item-content"><span>Item #</span>14</div></div>
            <div class="board-item"><div class="board-item-content"><span>Item #</span>15</div></div>
        </div>
        <button type="button" class="btn btn-success">+</button>
    </div>
</div>
<!-- -->
<!-- Create a new Task seciton -->
<h3> Tasks </h3>
<!-- old action link to projectTasks/Create view, below is the new option to post the new project task via jquery Ajax -->
<button type="button" class="btn btn-success" onclick="location.href='@Url.Action("Create", "ProjectTasks", new { projectId = Model.Id } )'">Add new task </button>
<br />
<br />
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal"> Open modal for </button>
<!--  -->
<!-- Dropdwon Modal for posting new task via ajax       !!!!THIS NEEDS TO BE A PARTIAL VIEW!!!!!      -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">New Project Task</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <!-- Render NewProjectTask partial View -->
                @Html.Partial("_NewProjectTask", new IssueTracker.Models.ProjectTask(), new ViewDataDictionary { { "ProjectId", Model.Id }, { "ProjectMembers", Model.ProjectMembers } })


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success">Add Task</button>
            </div>
        </div>
    </div>
</div>
<!-- -->

<h4> Project Backlog </h4>
<table id="project_backlog_table" class="display">
    <thead>
        <tr>
            <th>Task Id</th>
            <th>Name</th>
            <th>Description</th>
            <th>Complexity</th>
            <th>Action</th>
        </tr>
    </thead>
</table>
<h4> User Contributions </h4>
<br />

@section muuri
{
    <p> Muuri time </p>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
    <script src="https://unpkg.com/web-animations-js@2.3.1/web-animations.min.js"></script>
    <script src="https://unpkg.com/muuri@0.7.1/dist/muuri.min.js"></script>

    @Scripts.Render("~/bundles/muuri")  <!-- Render Muuri JS File initializer -->

    <script>
        $(document).ready(function () {

            var projectId = @Model.Id

             
           //Init DataTables with Product Backlog
            $('#project_backlog_table').DataTable({
                "ajax": {
                    "url": "/Project/LoadProjectBacklog",
                    "type": "GET",
                    "datatype": "json",
                    "data" : { "projectId": projectId }
                },
                "columns": [
                    { "data": "Id", "autoWidth": true },
                    { "data": "Name", "autoWidth": true },
                    { "data": "Description", "autoWidth": true },
                    { "data": "Complexity", "autoWidth": true },
                    {
                        "defaultContent" : "<button type=\"button\" class=\"btn btn-success btn-sm btn-space\">Add</button><button type=\"button\" class= \"btn btn-warning btn-sm btn-space\" > Remove</button><button type=\"button\" class=\"btn btn-danger btn-sm btn-space\">Delete</button><button type=\"button\" class=\"btn btn-primary btn-sm btn-space\">Vote Complexity</button>" 
                    }
                ]
                });

            //Init Muuri Grid with Task Objects
            $.ajax({
                url: "/Project/LoadProjectTasks",
                type: "GET",
                cache: false,
                data: { "projectId": projectId  },
                success: function (responsedata) {

                    //Get nested payload from json object
                    var payload = [];
                    $.each(responsedata, function (key, value) {
                        payload.push(value);
                    });

                    for (i = 0; i < payload[0].length; i++) {
                        var data = payload[0][i];
                        if (data.hasOwnProperty('Name')) {
                            var val = data['Name'];
                            var valkey = data['Id'];

                            //console.log("pre-val-name : " + val);
                            //console.log("pre-val-Id : " + valkey);

                            GenerateKanbanEntry(val, valkey, 0);
                        }
                    }
                }
            });


            //Muuri Helper Funcitons
            function GenerateKanbanEntry(Name, Id, BoardId) {

                var item = document.createElement('div');
                var inner = document.createElement('div');
                item.className = 'board-item';
                inner.className = 'board-item-content';
                inner.id = Id;
                inner.innerHTML = '<a href="ProjectTask/Details/'+ Id + '">' + Name + '</a>';
                item.appendChild(inner);

                var counter = 0
                columnGrids.forEach(function (grid) {
                    if (counter == 0)
                        grid.add(item);
                    counter++;
                });
            }

        });


        //Init image modal for rapidly adding project tasks
        $('#exampleModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget) // Button that triggered the modal
            var recipient = button.data('whatever') // Extract info from data-* attributes
            // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
            // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
            var modal = $(this)
            modal.find('.modal-title').text('New message to ' + recipient)
            modal.find('.modal-body input').val(recipient)
        })


        
    </script>

}

@section scripts {
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
}
